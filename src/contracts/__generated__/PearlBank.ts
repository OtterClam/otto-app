/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PearlBankInterface extends utils.Interface {
  functions: {
    "BASE()": FunctionFragment;
    "CLAM()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "SCALE()": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "addRewardToken(address)": FunctionFragment;
    "addToContractWhitelist(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "getAvailableTokenRewards(address,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,string,string,uint256)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "isRewardToken(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "isWhitelistedContract(address)": FunctionFragment;
    "lastTotalMultipliedStaked(address)": FunctionFragment;
    "latestTokenRewards(address)": FunctionFragment;
    "multiplierStakingEnabled()": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "otterInfo(address)": FunctionFragment;
    "paidTokenRewardsPerStake(address,address)": FunctionFragment;
    "payRewardsEnabled()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeFromContractWhitelist(address)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setMultiplierStakeEnabled(bool)": FunctionFragment;
    "setPayRewardsEnabled(bool)": FunctionFragment;
    "setRewardManager(address)": FunctionFragment;
    "setScale(uint256)": FunctionFragment;
    "setStakeEnabled(bool)": FunctionFragment;
    "setStakingWithdrawEnabled(bool)": FunctionFragment;
    "setTransferEnabled(bool)": FunctionFragment;
    "setWithdrawFeeDuration(uint256)": FunctionFragment;
    "setWithdrawFeeRate(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeEnabled()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toBePaid(address,address)": FunctionFragment;
    "totalMultipliedStaked()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalTokenRewardsPerStake(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferEnabled()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "whitelistedContracts(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawEnabled()": FunctionFragment;
    "withdrawFee(address,uint256)": FunctionFragment;
    "withdrawFeeDuration()": FunctionFragment;
    "withdrawFeeRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE"
      | "CLAM"
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "SCALE"
      | "addReward"
      | "addRewardToken"
      | "addToContractWhitelist"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimRewards"
      | "decimals"
      | "decreaseAllowance"
      | "depositLimit"
      | "getAvailableTokenRewards"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "increaseAllowance"
      | "initialize"
      | "isContract"
      | "isRewardToken"
      | "isWhitelisted"
      | "isWhitelistedContract"
      | "lastTotalMultipliedStaked"
      | "latestTokenRewards"
      | "multiplierStakingEnabled"
      | "name"
      | "onERC721Received"
      | "otterInfo"
      | "paidTokenRewardsPerStake"
      | "payRewardsEnabled"
      | "proxiableUUID"
      | "removeFromContractWhitelist"
      | "removeRewardToken"
      | "renounceRole"
      | "revokeRole"
      | "rewardManager"
      | "rewardTokens"
      | "setDepositLimit"
      | "setMultiplierStakeEnabled"
      | "setPayRewardsEnabled"
      | "setRewardManager"
      | "setScale"
      | "setStakeEnabled"
      | "setStakingWithdrawEnabled"
      | "setTransferEnabled"
      | "setWithdrawFeeDuration"
      | "setWithdrawFeeRate"
      | "stake"
      | "stakeEnabled"
      | "supportsInterface"
      | "symbol"
      | "toBePaid"
      | "totalMultipliedStaked"
      | "totalStaked"
      | "totalSupply"
      | "totalTokenRewardsPerStake"
      | "transfer"
      | "transferEnabled"
      | "transferFrom"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "whitelistedContracts"
      | "withdraw"
      | "withdrawEnabled"
      | "withdrawFee"
      | "withdrawFeeDuration"
      | "withdrawFeeRate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "CLAM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToContractWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokenRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTotalMultipliedStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTokenRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierStakingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "otterInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "paidTokenRewardsPerStake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payRewardsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromContractWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplierStakeEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayRewardsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingWithdrawEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeeDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toBePaid",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMultipliedStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenRewardsPerStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CLAM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCALE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTotalMultipliedStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierStakingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otterInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidTokenRewardsPerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRewardsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplierStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayRewardsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingWithdrawEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBePaid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMultipliedStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenRewardsPerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "AddToContractWhitelist(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "RemoveFromContractWhitelist(address)": EventFragment;
    "RewardAdded(address,uint256,uint256)": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "RewardManagerUpdated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "StakeMultiplier(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawMultiplier(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToContractWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveFromContractWhitelist"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawMultiplier"): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  AddToContractWhitelistEventObject
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  RemoveFromContractWhitelistEventObject
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface RewardAddedEventObject {
  token: string;
  amount: BigNumber;
  rps: BigNumber;
}
export type RewardAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardAddedEventObject
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardClaimedEventObject {
  token: string;
  staker: string;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardManagerUpdatedEventObject {
  newRewardManager: string;
}
export type RewardManagerUpdatedEvent = TypedEvent<
  [string],
  RewardManagerUpdatedEventObject
>;

export type RewardManagerUpdatedEventFilter =
  TypedEventFilter<RewardManagerUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakeEventObject {
  addr: string;
  amount: BigNumber;
  multipliedAmount: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface StakeMultiplierEventObject {
  addr: string;
  nft: string;
  tokenId: BigNumber;
  multipliedAmount: BigNumber;
}
export type StakeMultiplierEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakeMultiplierEventObject
>;

export type StakeMultiplierEventFilter = TypedEventFilter<StakeMultiplierEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  addr: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawMultiplierEventObject {
  addr: string;
  nft: string;
  tokenId: BigNumber;
  multipliedAmount: BigNumber;
}
export type WithdrawMultiplierEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawMultiplierEventObject
>;

export type WithdrawMultiplierEventFilter =
  TypedEventFilter<WithdrawMultiplierEvent>;

export interface PearlBank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PearlBankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    CLAM(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableTokenRewards(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalRewards: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      CLAM_: string,
      name_: string,
      symbol_: string,
      depositLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTotalMultipliedStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestTokenRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    otterInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        multipliedAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    paidTokenRewardsPerStake(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardManager(
      rewardManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScale(
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeeDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFeeRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toBePaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokenRewardsPerStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawFee(
      otter_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFeeDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  CLAM(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  addReward(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableTokenRewards(
    staker: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    CLAM_: string,
    name_: string,
    symbol_: string,
    depositLimit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelistedContract(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTotalMultipliedStaked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  latestTokenRewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiplierStakingEnabled(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  otterInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      multipliedAmount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  paidTokenRewardsPerStake(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setDepositLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiplierStakeEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayRewardsEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardManager(
    rewardManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScale(
    _scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakeEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingWithdrawEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeeDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFeeRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeEnabled(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toBePaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenRewardsPerStake(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

  withdrawFee(
    otter_: string,
    amount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFeeDuration(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    CLAM(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardToken(token: string, overrides?: CallOverrides): Promise<void>;

    addToContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableTokenRewards(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      CLAM_: string,
      name_: string,
      symbol_: string,
      depositLimit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTotalMultipliedStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestTokenRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    otterInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        multipliedAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    paidTokenRewardsPerStake(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeRewardToken(token: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardManager(
      rewardManager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setScale(_scale: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStakeEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeeDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFeeRate(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeEnabled(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toBePaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenRewardsPerStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

    withdrawFee(
      otter_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddToContractWhitelist(address)"(
      _contract?: string | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: string | null
    ): AddToContractWhitelistEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "RemoveFromContractWhitelist(address)"(
      _contract?: string | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: string | null
    ): RemoveFromContractWhitelistEventFilter;

    "RewardAdded(address,uint256,uint256)"(
      token?: string | null,
      amount?: null,
      rps?: null
    ): RewardAddedEventFilter;
    RewardAdded(
      token?: string | null,
      amount?: null,
      rps?: null
    ): RewardAddedEventFilter;

    "RewardClaimed(address,address,uint256)"(
      token?: string | null,
      staker?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      token?: string | null,
      staker?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;

    "RewardManagerUpdated(address)"(
      newRewardManager?: null
    ): RewardManagerUpdatedEventFilter;
    RewardManagerUpdated(
      newRewardManager?: null
    ): RewardManagerUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Stake(address,uint256,uint256)"(
      addr?: string | null,
      amount?: null,
      multipliedAmount?: null
    ): StakeEventFilter;
    Stake(
      addr?: string | null,
      amount?: null,
      multipliedAmount?: null
    ): StakeEventFilter;

    "StakeMultiplier(address,address,uint256,uint256)"(
      addr?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      multipliedAmount?: null
    ): StakeMultiplierEventFilter;
    StakeMultiplier(
      addr?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      multipliedAmount?: null
    ): StakeMultiplierEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(address,uint256,uint256)"(
      addr?: string | null,
      amount?: null,
      fee?: null
    ): WithdrawEventFilter;
    Withdraw(
      addr?: string | null,
      amount?: null,
      fee?: null
    ): WithdrawEventFilter;

    "WithdrawMultiplier(address,address,uint256,uint256)"(
      addr?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      multipliedAmount?: null
    ): WithdrawMultiplierEventFilter;
    WithdrawMultiplier(
      addr?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      multipliedAmount?: null
    ): WithdrawMultiplierEventFilter;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    CLAM(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableTokenRewards(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      CLAM_: string,
      name_: string,
      symbol_: string,
      depositLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTotalMultipliedStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestTokenRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otterInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    paidTokenRewardsPerStake(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardManager(
      rewardManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScale(
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFeeDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFeeRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toBePaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenRewardsPerStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(
      otter_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CLAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableTokenRewards(
      staker: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      CLAM_: string,
      name_: string,
      symbol_: string,
      depositLimit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTotalMultipliedStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestTokenRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplierStakingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otterInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paidTokenRewardsPerStake(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardManager(
      rewardManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScale(
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBePaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMultipliedStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenRewardsPerStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(
      otter_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeeDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
