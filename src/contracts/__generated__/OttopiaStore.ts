/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IOttopiaStore {
  export type ProductStruct = {
    price: BigNumberish;
    discountPrice: BigNumberish;
    amount: BigNumberish;
    typ: string;
    metaItemId: BigNumberish;
    startedAt: BigNumberish;
    endedAt: BigNumberish;
  };

  export type ProductStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    price: BigNumber;
    discountPrice: BigNumber;
    amount: BigNumber;
    typ: string;
    metaItemId: BigNumber;
    startedAt: BigNumber;
    endedAt: BigNumber;
  };
}

export interface OttopiaStoreInterface extends utils.Interface {
  functions: {
    "CLAM()": FunctionFragment;
    "DAO()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FISH()": FunctionFragment;
    "ITEM()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "OTTO()": FunctionFragment;
    "REWARD()": FunctionFragment;
    "WHITELISTED_CONTRACT()": FunctionFragment;
    "airdropClaimableAmount(uint256,uint256[])": FunctionFragment;
    "airdropInfos(uint256)": FunctionFragment;
    "amountOf(uint256)": FunctionFragment;
    "buy(address,uint256,uint256)": FunctionFragment;
    "buyFish(uint256)": FunctionFragment;
    "buyNoChainlink(address,uint256,uint256)": FunctionFragment;
    "claim(uint256,uint256[])": FunctionFragment;
    "claimNoChainlink(uint256,uint256[])": FunctionFragment;
    "claimed(uint256,uint256)": FunctionFragment;
    "coupons(uint256)": FunctionFragment;
    "createCoupon(uint256,uint256)": FunctionFragment;
    "createProduct((uint256,uint256,uint256,string,uint256,uint256,uint256),address)": FunctionFragment;
    "deleteCoupon(uint256)": FunctionFragment;
    "deleteProduct(uint256)": FunctionFragment;
    "discountPriceOf(uint256)": FunctionFragment;
    "factories(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantManager(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "initializeFish(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "products(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeManager(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAirdropInfo(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setFishPerClam(uint256)": FunctionFragment;
    "setItem(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toFish(uint256)": FunctionFragment;
    "toggleWhitelist(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCoupon(uint256,uint256)": FunctionFragment;
    "updateProduct(uint256,(uint256,uint256,uint256,string,uint256,uint256,uint256),address)": FunctionFragment;
    "upgradeForFlashSale()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAM"
      | "DAO"
      | "DEFAULT_ADMIN_ROLE"
      | "FISH"
      | "ITEM"
      | "MANAGER_ROLE"
      | "OTTO"
      | "REWARD"
      | "WHITELISTED_CONTRACT"
      | "airdropClaimableAmount"
      | "airdropInfos"
      | "amountOf"
      | "buy"
      | "buyFish"
      | "buyNoChainlink"
      | "claim"
      | "claimNoChainlink"
      | "claimed"
      | "coupons"
      | "createCoupon"
      | "createProduct"
      | "deleteCoupon"
      | "deleteProduct"
      | "discountPriceOf"
      | "factories"
      | "getRoleAdmin"
      | "grantManager"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeFish"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "products"
      | "proxiableUUID"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeManager"
      | "revokeRole"
      | "setAirdropInfo"
      | "setBaseURI"
      | "setFishPerClam"
      | "setItem"
      | "supportsInterface"
      | "toFish"
      | "toggleWhitelist"
      | "totalSupply"
      | "transferOwnership"
      | "updateCoupon"
      | "updateProduct"
      | "upgradeForFlashSale"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CLAM", values?: undefined): string;
  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FISH", values?: undefined): string;
  encodeFunctionData(functionFragment: "ITEM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OTTO", values?: undefined): string;
  encodeFunctionData(functionFragment: "REWARD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WHITELISTED_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaimableAmount",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNoChainlink",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNoChainlink",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coupons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCoupon",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [IOttopiaStore.ProductStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCoupon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "discountPriceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFish",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropInfo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFishPerClam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setItem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toFish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoupon",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BigNumberish, IOttopiaStore.ProductStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeForFlashSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "CLAM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FISH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ITEM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OTTO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REWARD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WHITELISTED_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amountOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyNoChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimNoChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coupons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountPriceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFishPerClam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toFish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeForFlashSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BuyProduct(uint256,address,address,uint256,uint256)": EventFragment;
    "CreateProduct(uint256)": EventFragment;
    "DeleteProduct(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemProduct(uint256,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UpdateProduct(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BuyProductEventObject {
  id: BigNumber;
  buyer: string;
  to: string;
  price: BigNumber;
  amount: BigNumber;
}
export type BuyProductEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  BuyProductEventObject
>;

export type BuyProductEventFilter = TypedEventFilter<BuyProductEvent>;

export interface CreateProductEventObject {
  id_: BigNumber;
}
export type CreateProductEvent = TypedEvent<
  [BigNumber],
  CreateProductEventObject
>;

export type CreateProductEventFilter = TypedEventFilter<CreateProductEvent>;

export interface DeleteProductEventObject {
  id_: BigNumber;
}
export type DeleteProductEvent = TypedEvent<
  [BigNumber],
  DeleteProductEventObject
>;

export type DeleteProductEventFilter = TypedEventFilter<DeleteProductEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemProductEventObject {
  id: BigNumber;
  redeemer: string;
  amount: BigNumber;
}
export type RedeemProductEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedeemProductEventObject
>;

export type RedeemProductEventFilter = TypedEventFilter<RedeemProductEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpdateProductEventObject {
  id_: BigNumber;
}
export type UpdateProductEvent = TypedEvent<
  [BigNumber],
  UpdateProductEventObject
>;

export type UpdateProductEventFilter = TypedEventFilter<UpdateProductEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OttopiaStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OttopiaStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAM(overrides?: CallOverrides): Promise<[string]>;

    DAO(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FISH(overrides?: CallOverrides): Promise<[string]>;

    ITEM(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OTTO(overrides?: CallOverrides): Promise<[string]>;

    REWARD(overrides?: CallOverrides): Promise<[string]>;

    WHITELISTED_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    airdropClaimableAmount(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    airdropInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startId: BigNumber;
        endId: BigNumber;
        amount: BigNumber;
      }
    >;

    amountOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFish(
      clamAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyNoChainlink(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNoChainlink(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coupons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { productId: BigNumber; created: boolean }
    >;

    createCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProduct(
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteCoupon(
      itemId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteProduct(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountPriceOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      clam_: string,
      dao_: string,
      reward_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeFish(
      fish_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      from_: string,
      itemId_: BigNumberish,
      amount_: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    products(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        price: BigNumber;
        discountPrice: BigNumber;
        amount: BigNumber;
        typ: string;
        metaItemId: BigNumber;
        startedAt: BigNumber;
        endedAt: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAirdropInfo(
      productId_: BigNumberish,
      startId_: BigNumberish,
      endId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFishPerClam(
      fishPerClam_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItem(
      item_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toFish(
      clamAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toggleWhitelist(
      contract_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProduct(
      id_: BigNumberish,
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeForFlashSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(id_: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  CLAM(overrides?: CallOverrides): Promise<string>;

  DAO(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FISH(overrides?: CallOverrides): Promise<string>;

  ITEM(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  OTTO(overrides?: CallOverrides): Promise<string>;

  REWARD(overrides?: CallOverrides): Promise<string>;

  WHITELISTED_CONTRACT(overrides?: CallOverrides): Promise<string>;

  airdropClaimableAmount(
    productId_: BigNumberish,
    ottoIds_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  airdropInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startId: BigNumber;
      endId: BigNumber;
      amount: BigNumber;
    }
  >;

  amountOf(id_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    to_: string,
    id_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFish(
    clamAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyNoChainlink(
    to_: string,
    id_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    productId_: BigNumberish,
    ottoIds_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNoChainlink(
    productId_: BigNumberish,
    ottoIds_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coupons(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { productId: BigNumber; created: boolean }>;

  createCoupon(
    itemId_: BigNumberish,
    productId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProduct(
    product_: IOttopiaStore.ProductStruct,
    factory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteCoupon(
    itemId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteProduct(
    id_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountPriceOf(
    id_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantManager(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    clam_: string,
    dao_: string,
    reward_: string,
    otto_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeFish(
    fish_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    from_: string,
    itemId_: BigNumberish,
    amount_: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  products(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      price: BigNumber;
      discountPrice: BigNumber;
      amount: BigNumber;
      typ: string;
      metaItemId: BigNumber;
      startedAt: BigNumber;
      endedAt: BigNumber;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeManager(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAirdropInfo(
    productId_: BigNumberish,
    startId_: BigNumberish,
    endId_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFishPerClam(
    fishPerClam_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItem(
    item_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toFish(
    clamAmount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toggleWhitelist(
    contract_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCoupon(
    itemId_: BigNumberish,
    productId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProduct(
    id_: BigNumberish,
    product_: IOttopiaStore.ProductStruct,
    factory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeForFlashSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(id_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CLAM(overrides?: CallOverrides): Promise<string>;

    DAO(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FISH(overrides?: CallOverrides): Promise<string>;

    ITEM(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    OTTO(overrides?: CallOverrides): Promise<string>;

    REWARD(overrides?: CallOverrides): Promise<string>;

    WHITELISTED_CONTRACT(overrides?: CallOverrides): Promise<string>;

    airdropClaimableAmount(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    airdropInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startId: BigNumber;
        endId: BigNumber;
        amount: BigNumber;
      }
    >;

    amountOf(id_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyFish(
      clamAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyNoChainlink(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimNoChainlink(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coupons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { productId: BigNumber; created: boolean }
    >;

    createCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createProduct(
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteCoupon(
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteProduct(id_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    discountPriceOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantManager(manager_: string, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      clam_: string,
      dao_: string,
      reward_: string,
      otto_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeFish(fish_: string, overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      from_: string,
      itemId_: BigNumberish,
      amount_: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    products(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        price: BigNumber;
        discountPrice: BigNumber;
        amount: BigNumber;
        typ: string;
        metaItemId: BigNumber;
        startedAt: BigNumber;
        endedAt: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeManager(manager_: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAirdropInfo(
      productId_: BigNumberish,
      startId_: BigNumberish,
      endId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    setFishPerClam(
      fishPerClam_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setItem(item_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toFish(
      clamAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleWhitelist(
      contract_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProduct(
      id_: BigNumberish,
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeForFlashSale(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id_: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BuyProduct(uint256,address,address,uint256,uint256)"(
      id?: BigNumberish | null,
      buyer?: string | null,
      to?: string | null,
      price?: null,
      amount?: null
    ): BuyProductEventFilter;
    BuyProduct(
      id?: BigNumberish | null,
      buyer?: string | null,
      to?: string | null,
      price?: null,
      amount?: null
    ): BuyProductEventFilter;

    "CreateProduct(uint256)"(
      id_?: BigNumberish | null
    ): CreateProductEventFilter;
    CreateProduct(id_?: BigNumberish | null): CreateProductEventFilter;

    "DeleteProduct(uint256)"(
      id_?: BigNumberish | null
    ): DeleteProductEventFilter;
    DeleteProduct(id_?: BigNumberish | null): DeleteProductEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedeemProduct(uint256,address,uint256)"(
      id?: BigNumberish | null,
      redeemer?: string | null,
      amount?: null
    ): RedeemProductEventFilter;
    RedeemProduct(
      id?: BigNumberish | null,
      redeemer?: string | null,
      amount?: null
    ): RedeemProductEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "UpdateProduct(uint256)"(
      id_?: BigNumberish | null
    ): UpdateProductEventFilter;
    UpdateProduct(id_?: BigNumberish | null): UpdateProductEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    CLAM(overrides?: CallOverrides): Promise<BigNumber>;

    DAO(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FISH(overrides?: CallOverrides): Promise<BigNumber>;

    ITEM(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OTTO(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELISTED_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    airdropClaimableAmount(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    airdropInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountOf(id_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFish(
      clamAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyNoChainlink(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNoChainlink(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coupons(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProduct(
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteCoupon(
      itemId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteProduct(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountPriceOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      clam_: string,
      dao_: string,
      reward_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeFish(
      fish_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      from_: string,
      itemId_: BigNumberish,
      amount_: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    products(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAirdropInfo(
      productId_: BigNumberish,
      startId_: BigNumberish,
      endId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFishPerClam(
      fishPerClam_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItem(
      item_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toFish(
      clamAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleWhitelist(
      contract_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProduct(
      id_: BigNumberish,
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeForFlashSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(id_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FISH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ITEM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OTTO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELISTED_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropClaimableAmount(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFish(
      clamAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyNoChainlink(
      to_: string,
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNoChainlink(
      productId_: BigNumberish,
      ottoIds_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coupons(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProduct(
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteCoupon(
      itemId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteProduct(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountPriceOf(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      clam_: string,
      dao_: string,
      reward_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeFish(
      fish_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      from_: string,
      itemId_: BigNumberish,
      amount_: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    products(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAirdropInfo(
      productId_: BigNumberish,
      startId_: BigNumberish,
      endId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFishPerClam(
      fishPerClam_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItem(
      item_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toFish(
      clamAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleWhitelist(
      contract_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCoupon(
      itemId_: BigNumberish,
      productId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProduct(
      id_: BigNumberish,
      product_: IOttopiaStore.ProductStruct,
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeForFlashSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
