/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IOttoWearingFacet {
  export type ItemActionInputStruct = {
    typ: BigNumberish;
    itemId: BigNumberish;
    fromOttoId: BigNumberish;
  };

  export type ItemActionInputStructOutput = [number, BigNumber, BigNumber] & {
    typ: number;
    itemId: BigNumber;
    fromOttoId: BigNumber;
  };

  export type ItemActionOutputStruct = {
    returned: boolean;
    returnedItemId: BigNumberish;
  };

  export type ItemActionOutputStructOutput = [boolean, BigNumber] & {
    returned: boolean;
    returnedItemId: BigNumber;
  };
}

export interface OttoInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ITEM()": FunctionFragment;
    "ITEM_MANAGER_ROLE()": FunctionFragment;
    "LEVEL_UP_ATTRITUBE_POINTS()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "candidates(uint256,uint256)": FunctionFragment;
    "decayTarget()": FunctionFragment;
    "epochBoosts(uint256,uint32,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantManager(address)": FunctionFragment;
    "grantMinter(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "infos(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nextOwnerToExplicitlySet()": FunctionFragment;
    "openPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rawTraitsOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeManager(address)": FunctionFragment;
    "revokeMinter(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "baseAttributesOf(uint256)": FunctionFragment;
    "calcExp(uint32,uint32,uint32)": FunctionFragment;
    "canOpenAt(uint256)": FunctionFragment;
    "candidatesOf(uint256)": FunctionFragment;
    "doItemBatchActions(uint256,(uint8,uint256,uint256)[])": FunctionFragment;
    "equipWillReturn(uint256,uint256)": FunctionFragment;
    "equipable(uint256,uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "genderOf(uint256)": FunctionFragment;
    "increaseAp(uint256,uint32)": FunctionFragment;
    "increaseExp(uint256,uint32)": FunctionFragment;
    "legendary(uint256)": FunctionFragment;
    "maxBatch()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "nextLevelExp(uint32)": FunctionFragment;
    "numericTraitsOf(uint256)": FunctionFragment;
    "openPortal(uint256,uint256[],bool)": FunctionFragment;
    "ownedItemsOf(uint256)": FunctionFragment;
    "portalStatusOf(uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setTraitCode(uint256,uint8,uint16)": FunctionFragment;
    "summon(uint256,uint256,uint256)": FunctionFragment;
    "toNumericTraits(uint16[16])": FunctionFragment;
    "totalLevelExp(uint32)": FunctionFragment;
    "totalMintable()": FunctionFragment;
    "traitsOf(uint256)": FunctionFragment;
    "transferChild(uint256,address,address,uint256)": FunctionFragment;
    "transferChildToParent(uint256,address,uint256,address,uint256,bytes)": FunctionFragment;
    "updateBaseAttributes(uint256,int16[8])": FunctionFragment;
    "useAttributePoints(uint256,int16[7])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "ITEM"
      | "ITEM_MANAGER_ROLE"
      | "LEVEL_UP_ATTRITUBE_POINTS"
      | "MANAGER_ROLE"
      | "MINTER_ROLE"
      | "approve"
      | "balanceOf"
      | "candidates"
      | "decayTarget"
      | "epochBoosts"
      | "getApproved"
      | "getRoleAdmin"
      | "grantManager"
      | "grantMinter"
      | "grantRole"
      | "hasRole"
      | "infos"
      | "isApprovedForAll"
      | "name"
      | "nextOwnerToExplicitlySet"
      | "openPeriod"
      | "owner"
      | "ownerOf"
      | "proxiableUUID"
      | "rawTraitsOf"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeManager"
      | "revokeMinter"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "baseAttributesOf"
      | "calcExp"
      | "canOpenAt"
      | "candidatesOf"
      | "doItemBatchActions"
      | "equipWillReturn"
      | "equipable"
      | "exists"
      | "genderOf"
      | "increaseAp"
      | "increaseExp"
      | "legendary"
      | "maxBatch"
      | "mint"
      | "nextLevelExp"
      | "numericTraitsOf"
      | "openPortal"
      | "ownedItemsOf"
      | "portalStatusOf"
      | "setBaseURI"
      | "setTraitCode"
      | "summon"
      | "toNumericTraits"
      | "totalLevelExp"
      | "totalMintable"
      | "traitsOf"
      | "transferChild"
      | "transferChildToParent"
      | "updateBaseAttributes"
      | "useAttributePoints"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ITEM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ITEM_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL_UP_ATTRITUBE_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decayTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochBoosts",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "grantMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "infos", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOwnerToExplicitlySet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawTraitsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseAttributesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcExp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canOpenAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidatesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doItemBatchActions",
    values: [BigNumberish, IOttoWearingFacet.ItemActionInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "equipWillReturn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genderOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseExp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legendary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxBatch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextLevelExp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numericTraitsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPortal",
    values: [BigNumberish, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedItemsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "portalStatusOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTraitCode",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "summon",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toNumericTraits",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLevelExp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traitsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferChild",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferChildToParent",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseAttributes",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "useAttributePoints",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ITEM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ITEM_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL_UP_ATTRITUBE_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decayTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "infos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOwnerToExplicitlySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawTraitsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseAttributesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canOpenAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidatesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doItemBatchActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equipWillReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equipable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "genderOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseAp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "legendary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextLevelExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numericTraitsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPortal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownedItemsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "portalStatusOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTraitCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "summon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toNumericTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLevelExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traitsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferChildToParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useAttributePoints",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "ApIncreased(uint256,uint32,uint32)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseAttributesChanged(uint256,int16[8])": EventFragment;
    "BaseAttributesUpdated(uint256,int16[8])": EventFragment;
    "BaseURIChanged(address,string)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "EpochBoostsChanged(uint256,uint32,int16[9])": EventFragment;
    "EpochBoostsUpdated(uint256,uint32,int16[8])": EventFragment;
    "ExpIncreased(uint256,uint32,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ItemEquipped(uint256,uint256)": EventFragment;
    "ItemTookOff(uint256,uint256)": EventFragment;
    "ItemUsed(uint256,uint256)": EventFragment;
    "LevelUp(uint256,uint32,uint32,uint32,uint32,uint32)": EventFragment;
    "OpenPortal(address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SummonOtto(address,uint256,bool)": EventFragment;
    "TraitsChanged(uint256,uint16[16])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseAttributesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseAttributesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochBoostsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochBoostsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemEquipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTookOff"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPortal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SummonOtto"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TraitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApIncreasedEventObject {
  ottoId_: BigNumber;
  total_: number;
  inc_: number;
}
export type ApIncreasedEvent = TypedEvent<
  [BigNumber, number, number],
  ApIncreasedEventObject
>;

export type ApIncreasedEventFilter = TypedEventFilter<ApIncreasedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseAttributesChangedEventObject {
  ottoId_: BigNumber;
  attrs_: number[];
}
export type BaseAttributesChangedEvent = TypedEvent<
  [BigNumber, number[]],
  BaseAttributesChangedEventObject
>;

export type BaseAttributesChangedEventFilter =
  TypedEventFilter<BaseAttributesChangedEvent>;

export interface BaseAttributesUpdatedEventObject {
  ottoId_: BigNumber;
  delta_: number[];
}
export type BaseAttributesUpdatedEvent = TypedEvent<
  [BigNumber, number[]],
  BaseAttributesUpdatedEventObject
>;

export type BaseAttributesUpdatedEventFilter =
  TypedEventFilter<BaseAttributesUpdatedEvent>;

export interface BaseURIChangedEventObject {
  sender_: string;
  baseURI_: string;
}
export type BaseURIChangedEvent = TypedEvent<
  [string, string],
  BaseURIChangedEventObject
>;

export type BaseURIChangedEventFilter = TypedEventFilter<BaseURIChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface EpochBoostsChangedEventObject {
  ottoId_: BigNumber;
  epoch_: number;
  attrs_: number[];
}
export type EpochBoostsChangedEvent = TypedEvent<
  [BigNumber, number, number[]],
  EpochBoostsChangedEventObject
>;

export type EpochBoostsChangedEventFilter =
  TypedEventFilter<EpochBoostsChangedEvent>;

export interface EpochBoostsUpdatedEventObject {
  ottoId_: BigNumber;
  epoch_: number;
  delta_: number[];
}
export type EpochBoostsUpdatedEvent = TypedEvent<
  [BigNumber, number, number[]],
  EpochBoostsUpdatedEventObject
>;

export type EpochBoostsUpdatedEventFilter =
  TypedEventFilter<EpochBoostsUpdatedEvent>;

export interface ExpIncreasedEventObject {
  ottoId_: BigNumber;
  total_: number;
  inc_: number;
}
export type ExpIncreasedEvent = TypedEvent<
  [BigNumber, number, number],
  ExpIncreasedEventObject
>;

export type ExpIncreasedEventFilter = TypedEventFilter<ExpIncreasedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ItemEquippedEventObject {
  ottoId_: BigNumber;
  itemId_: BigNumber;
}
export type ItemEquippedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ItemEquippedEventObject
>;

export type ItemEquippedEventFilter = TypedEventFilter<ItemEquippedEvent>;

export interface ItemTookOffEventObject {
  ottoId_: BigNumber;
  itemId_: BigNumber;
}
export type ItemTookOffEvent = TypedEvent<
  [BigNumber, BigNumber],
  ItemTookOffEventObject
>;

export type ItemTookOffEventFilter = TypedEventFilter<ItemTookOffEvent>;

export interface ItemUsedEventObject {
  ottoId_: BigNumber;
  itemId_: BigNumber;
}
export type ItemUsedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ItemUsedEventObject
>;

export type ItemUsedEventFilter = TypedEventFilter<ItemUsedEvent>;

export interface LevelUpEventObject {
  ottoId_: BigNumber;
  fromLv_: number;
  toLv_: number;
  fromExp_: number;
  toExp_: number;
  attributePoints_: number;
}
export type LevelUpEvent = TypedEvent<
  [BigNumber, number, number, number, number, number],
  LevelUpEventObject
>;

export type LevelUpEventFilter = TypedEventFilter<LevelUpEvent>;

export interface OpenPortalEventObject {
  sender_: string;
  tokenId_: BigNumber;
  legendary_: boolean;
}
export type OpenPortalEvent = TypedEvent<
  [string, BigNumber, boolean],
  OpenPortalEventObject
>;

export type OpenPortalEventFilter = TypedEventFilter<OpenPortalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SummonOttoEventObject {
  sender_: string;
  tokenId_: BigNumber;
  legendary_: boolean;
}
export type SummonOttoEvent = TypedEvent<
  [string, BigNumber, boolean],
  SummonOttoEventObject
>;

export type SummonOttoEventFilter = TypedEventFilter<SummonOttoEvent>;

export interface TraitsChangedEventObject {
  tokenId_: BigNumber;
  arr_: number[];
}
export type TraitsChangedEvent = TypedEvent<
  [BigNumber, number[]],
  TraitsChangedEventObject
>;

export type TraitsChangedEventFilter = TypedEventFilter<TraitsChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Otto extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OttoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ITEM(overrides?: CallOverrides): Promise<[string]>;

    ITEM_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LEVEL_UP_ATTRITUBE_POINTS(overrides?: CallOverrides): Promise<[number]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    candidates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decayTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochBoosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        number,
        number,
        number,
        number,
        BigNumber
      ] & {
        mintAt: BigNumber;
        canOpenAt: BigNumber;
        summonAt: BigNumber;
        birthday: BigNumber;
        traits: BigNumber;
        portalStatus: number;
        legendary: boolean;
        attributePoints: number;
        ap: number;
        exp: number;
        level: number;
        lastLevelUpAt: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<[BigNumber]>;

    openPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rawTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]] & { arr_: number[] }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseAttributesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    calcExp(
      fromLv_: BigNumberish,
      fromExp_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { lv_: number; exp_: number }>;

    canOpenAt(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    candidatesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    doItemBatchActions(
      ottoId_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    equipWillReturn(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    equipable(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exists(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    genderOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    increaseAp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseExp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    legendary(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxBatch(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to_: string,
      quantity_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextLevelExp(n: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    numericTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPortal(
      tokenId_: BigNumberish,
      candidates_: BigNumberish[],
      legendary_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownedItemsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { itemIds_: BigNumber[] }>;

    portalStatusOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraitCode(
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    summon(
      tokenId_: BigNumberish,
      candidateIndex: BigNumberish,
      birthday_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toNumericTraits(
      arr_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLevelExp(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    totalMintable(overrides?: CallOverrides): Promise<[BigNumber]>;

    traitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    transferChild(
      _fromTokenId: BigNumberish,
      _to: string,
      _childContract: string,
      _childTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferChildToParent(
      _fromTokenId: BigNumberish,
      _toContract: string,
      _toTokenId: BigNumberish,
      _childContract: string,
      _childTokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBaseAttributes(
      ottoId_: BigNumberish,
      delta_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useAttributePoints(
      ottoId_: BigNumberish,
      values_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ITEM(overrides?: CallOverrides): Promise<string>;

  ITEM_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  LEVEL_UP_ATTRITUBE_POINTS(overrides?: CallOverrides): Promise<number>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  candidates(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decayTarget(overrides?: CallOverrides): Promise<BigNumber>;

  epochBoosts(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantManager(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantMinter(
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  infos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      number,
      number,
      number,
      number,
      BigNumber
    ] & {
      mintAt: BigNumber;
      canOpenAt: BigNumber;
      summonAt: BigNumber;
      birthday: BigNumber;
      traits: BigNumber;
      portalStatus: number;
      legendary: boolean;
      attributePoints: number;
      ap: number;
      exp: number;
      level: number;
      lastLevelUpAt: BigNumber;
    }
  >;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

  openPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rawTraitsOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeManager(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeMinter(
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseAttributesOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  calcExp(
    fromLv_: BigNumberish,
    fromExp_: BigNumberish,
    inc_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { lv_: number; exp_: number }>;

  canOpenAt(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidatesOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  doItemBatchActions(
    ottoId_: BigNumberish,
    inputs_: IOttoWearingFacet.ItemActionInputStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  equipWillReturn(
    ottoId_: BigNumberish,
    itemId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  equipable(
    ottoId_: BigNumberish,
    itemId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exists(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  genderOf(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<number>;

  increaseAp(
    ottoId_: BigNumberish,
    inc_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseExp(
    ottoId_: BigNumberish,
    inc_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  legendary(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxBatch(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to_: string,
    quantity_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextLevelExp(n: BigNumberish, overrides?: CallOverrides): Promise<number>;

  numericTraitsOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPortal(
    tokenId_: BigNumberish,
    candidates_: BigNumberish[],
    legendary_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownedItemsOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  portalStatusOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraitCode(
    tokenId_: BigNumberish,
    slot_: BigNumberish,
    code_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  summon(
    tokenId_: BigNumberish,
    candidateIndex: BigNumberish,
    birthday_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toNumericTraits(
    arr_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLevelExp(n: BigNumberish, overrides?: CallOverrides): Promise<number>;

  totalMintable(overrides?: CallOverrides): Promise<BigNumber>;

  traitsOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  transferChild(
    _fromTokenId: BigNumberish,
    _to: string,
    _childContract: string,
    _childTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferChildToParent(
    _fromTokenId: BigNumberish,
    _toContract: string,
    _toTokenId: BigNumberish,
    _childContract: string,
    _childTokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBaseAttributes(
    ottoId_: BigNumberish,
    delta_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useAttributePoints(
    ottoId_: BigNumberish,
    values_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ITEM(overrides?: CallOverrides): Promise<string>;

    ITEM_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    LEVEL_UP_ATTRITUBE_POINTS(overrides?: CallOverrides): Promise<number>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    candidates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decayTarget(overrides?: CallOverrides): Promise<BigNumber>;

    epochBoosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantManager(manager_: string, overrides?: CallOverrides): Promise<void>;

    grantMinter(minter_: string, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        number,
        number,
        number,
        number,
        BigNumber
      ] & {
        mintAt: BigNumber;
        canOpenAt: BigNumber;
        summonAt: BigNumber;
        birthday: BigNumber;
        traits: BigNumber;
        portalStatus: number;
        legendary: boolean;
        attributePoints: number;
        ap: number;
        exp: number;
        level: number;
        lastLevelUpAt: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

    openPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rawTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeManager(manager_: string, overrides?: CallOverrides): Promise<void>;

    revokeMinter(minter_: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    baseAttributesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    calcExp(
      fromLv_: BigNumberish,
      fromExp_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { lv_: number; exp_: number }>;

    canOpenAt(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidatesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    doItemBatchActions(
      ottoId_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      overrides?: CallOverrides
    ): Promise<IOttoWearingFacet.ItemActionOutputStructOutput[]>;

    equipWillReturn(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    equipable(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exists(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    genderOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    increaseAp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseExp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    legendary(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxBatch(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to_: string,
      quantity_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextLevelExp(n: BigNumberish, overrides?: CallOverrides): Promise<number>;

    numericTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPortal(
      tokenId_: BigNumberish,
      candidates_: BigNumberish[],
      legendary_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownedItemsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    portalStatusOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    setTraitCode(
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    summon(
      tokenId_: BigNumberish,
      candidateIndex: BigNumberish,
      birthday_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toNumericTraits(
      arr_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLevelExp(n: BigNumberish, overrides?: CallOverrides): Promise<number>;

    totalMintable(overrides?: CallOverrides): Promise<BigNumber>;

    traitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    transferChild(
      _fromTokenId: BigNumberish,
      _to: string,
      _childContract: string,
      _childTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferChildToParent(
      _fromTokenId: BigNumberish,
      _toContract: string,
      _toTokenId: BigNumberish,
      _childContract: string,
      _childTokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseAttributes(
      ottoId_: BigNumberish,
      delta_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    useAttributePoints(
      ottoId_: BigNumberish,
      values_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "ApIncreased(uint256,uint32,uint32)"(
      ottoId_?: BigNumberish | null,
      total_?: null,
      inc_?: null
    ): ApIncreasedEventFilter;
    ApIncreased(
      ottoId_?: BigNumberish | null,
      total_?: null,
      inc_?: null
    ): ApIncreasedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseAttributesChanged(uint256,int16[8])"(
      ottoId_?: BigNumberish | null,
      attrs_?: null
    ): BaseAttributesChangedEventFilter;
    BaseAttributesChanged(
      ottoId_?: BigNumberish | null,
      attrs_?: null
    ): BaseAttributesChangedEventFilter;

    "BaseAttributesUpdated(uint256,int16[8])"(
      ottoId_?: BigNumberish | null,
      delta_?: null
    ): BaseAttributesUpdatedEventFilter;
    BaseAttributesUpdated(
      ottoId_?: BigNumberish | null,
      delta_?: null
    ): BaseAttributesUpdatedEventFilter;

    "BaseURIChanged(address,string)"(
      sender_?: string | null,
      baseURI_?: null
    ): BaseURIChangedEventFilter;
    BaseURIChanged(
      sender_?: string | null,
      baseURI_?: null
    ): BaseURIChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "EpochBoostsChanged(uint256,uint32,int16[9])"(
      ottoId_?: BigNumberish | null,
      epoch_?: BigNumberish | null,
      attrs_?: null
    ): EpochBoostsChangedEventFilter;
    EpochBoostsChanged(
      ottoId_?: BigNumberish | null,
      epoch_?: BigNumberish | null,
      attrs_?: null
    ): EpochBoostsChangedEventFilter;

    "EpochBoostsUpdated(uint256,uint32,int16[8])"(
      ottoId_?: BigNumberish | null,
      epoch_?: BigNumberish | null,
      delta_?: null
    ): EpochBoostsUpdatedEventFilter;
    EpochBoostsUpdated(
      ottoId_?: BigNumberish | null,
      epoch_?: BigNumberish | null,
      delta_?: null
    ): EpochBoostsUpdatedEventFilter;

    "ExpIncreased(uint256,uint32,uint32)"(
      ottoId_?: BigNumberish | null,
      total_?: null,
      inc_?: null
    ): ExpIncreasedEventFilter;
    ExpIncreased(
      ottoId_?: BigNumberish | null,
      total_?: null,
      inc_?: null
    ): ExpIncreasedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ItemEquipped(uint256,uint256)"(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemEquippedEventFilter;
    ItemEquipped(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemEquippedEventFilter;

    "ItemTookOff(uint256,uint256)"(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemTookOffEventFilter;
    ItemTookOff(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemTookOffEventFilter;

    "ItemUsed(uint256,uint256)"(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemUsedEventFilter;
    ItemUsed(
      ottoId_?: BigNumberish | null,
      itemId_?: BigNumberish | null
    ): ItemUsedEventFilter;

    "LevelUp(uint256,uint32,uint32,uint32,uint32,uint32)"(
      ottoId_?: BigNumberish | null,
      fromLv_?: null,
      toLv_?: null,
      fromExp_?: null,
      toExp_?: null,
      attributePoints_?: null
    ): LevelUpEventFilter;
    LevelUp(
      ottoId_?: BigNumberish | null,
      fromLv_?: null,
      toLv_?: null,
      fromExp_?: null,
      toExp_?: null,
      attributePoints_?: null
    ): LevelUpEventFilter;

    "OpenPortal(address,uint256,bool)"(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      legendary_?: null
    ): OpenPortalEventFilter;
    OpenPortal(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      legendary_?: null
    ): OpenPortalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SummonOtto(address,uint256,bool)"(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      legendary_?: null
    ): SummonOttoEventFilter;
    SummonOtto(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      legendary_?: null
    ): SummonOttoEventFilter;

    "TraitsChanged(uint256,uint16[16])"(
      tokenId_?: BigNumberish | null,
      arr_?: null
    ): TraitsChangedEventFilter;
    TraitsChanged(
      tokenId_?: BigNumberish | null,
      arr_?: null
    ): TraitsChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ITEM(overrides?: CallOverrides): Promise<BigNumber>;

    ITEM_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVEL_UP_ATTRITUBE_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    candidates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decayTarget(overrides?: CallOverrides): Promise<BigNumber>;

    epochBoosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    infos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextOwnerToExplicitlySet(overrides?: CallOverrides): Promise<BigNumber>;

    openPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rawTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseAttributesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcExp(
      fromLv_: BigNumberish,
      fromExp_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canOpenAt(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidatesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doItemBatchActions(
      ottoId_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    equipWillReturn(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipable(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genderOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseExp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    legendary(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBatch(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to_: string,
      quantity_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextLevelExp(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numericTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPortal(
      tokenId_: BigNumberish,
      candidates_: BigNumberish[],
      legendary_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownedItemsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    portalStatusOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraitCode(
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    summon(
      tokenId_: BigNumberish,
      candidateIndex: BigNumberish,
      birthday_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toNumericTraits(
      arr_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLevelExp(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMintable(overrides?: CallOverrides): Promise<BigNumber>;

    traitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferChild(
      _fromTokenId: BigNumberish,
      _to: string,
      _childContract: string,
      _childTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferChildToParent(
      _fromTokenId: BigNumberish,
      _toContract: string,
      _toTokenId: BigNumberish,
      _childContract: string,
      _childTokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBaseAttributes(
      ottoId_: BigNumberish,
      delta_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useAttributePoints(
      ottoId_: BigNumberish,
      values_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ITEM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ITEM_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEVEL_UP_ATTRITUBE_POINTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decayTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochBoosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOwnerToExplicitlySet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseAttributesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcExp(
      fromLv_: BigNumberish,
      fromExp_: BigNumberish,
      inc_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canOpenAt(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidatesOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doItemBatchActions(
      ottoId_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    equipWillReturn(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equipable(
      ottoId_: BigNumberish,
      itemId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genderOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseExp(
      ottoId_: BigNumberish,
      inc_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    legendary(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBatch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to_: string,
      quantity_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextLevelExp(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numericTraitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPortal(
      tokenId_: BigNumberish,
      candidates_: BigNumberish[],
      legendary_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownedItemsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    portalStatusOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraitCode(
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    summon(
      tokenId_: BigNumberish,
      candidateIndex: BigNumberish,
      birthday_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toNumericTraits(
      arr_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLevelExp(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traitsOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferChild(
      _fromTokenId: BigNumberish,
      _to: string,
      _childContract: string,
      _childTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferChildToParent(
      _fromTokenId: BigNumberish,
      _toContract: string,
      _toTokenId: BigNumberish,
      _childContract: string,
      _childTokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseAttributes(
      ottoId_: BigNumberish,
      delta_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useAttributePoints(
      ottoId_: BigNumberish,
      values_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
