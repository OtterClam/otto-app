/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IOttoWearingFacet {
  export type ItemActionInputStruct = {
    typ: BigNumberish;
    itemId: BigNumberish;
    fromOttoId: BigNumberish;
  };

  export type ItemActionInputStructOutput = [number, BigNumber, BigNumber] & {
    typ: number;
    itemId: BigNumber;
    fromOttoId: BigNumber;
  };
}

export declare namespace Adventure {
  export type SignatureStruct = {
    nonce: string;
    digest: BytesLike;
    signed: BytesLike;
  };

  export type SignatureStructOutput = [string, string, string] & {
    nonce: string;
    digest: string;
    signed: string;
  };

  export type RewardsStruct = {
    exp: BigNumberish;
    ap: BigNumberish;
    tcp: BigNumberish;
    items: BigNumberish[];
    bonuses: BigNumberish[];
  };

  export type RewardsStructOutput = [
    number,
    number,
    number,
    BigNumber[],
    BigNumber[]
  ] & {
    exp: number;
    ap: number;
    tcp: number;
    items: BigNumber[];
    bonuses: BigNumber[];
  };

  export type PassStruct = {
    locId: BigNumberish;
    ottoId: BigNumberish;
    departureAt: BigNumberish;
    canFinishAt: BigNumberish;
    finishedAt: BigNumberish;
    seed: BigNumberish;
    success: boolean;
    revived: boolean;
    rewards: Adventure.RewardsStruct;
    expMultiplier: BigNumberish;
    itemAmountMultiplier: BigNumberish;
  };

  export type PassStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    Adventure.RewardsStructOutput,
    number,
    number
  ] & {
    locId: BigNumber;
    ottoId: BigNumber;
    departureAt: BigNumber;
    canFinishAt: BigNumber;
    finishedAt: BigNumber;
    seed: BigNumber;
    success: boolean;
    revived: boolean;
    rewards: Adventure.RewardsStructOutput;
    expMultiplier: number;
    itemAmountMultiplier: number;
  };
}

export interface AdventureInterface extends utils.Interface {
  functions: {
    "CLAM()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FINISH_IMMEDIATELY_PAYMENT_KEY()": FunctionFragment;
    "ITEM()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "MAX_OTTOS_PER_WALLET()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "OTTO()": FunctionFragment;
    "PASS()": FunctionFragment;
    "POTION_EFFECT_MANAGER_ROLE()": FunctionFragment;
    "RAND()": FunctionFragment;
    "REVIVE_PAYMENT_KEY()": FunctionFragment;
    "STORE()": FunctionFragment;
    "TREASURE_CHEST_ITEM_ID()": FunctionFragment;
    "accumulativeTcp(address)": FunctionFragment;
    "allowPotions(uint256[])": FunctionFragment;
    "allowedPotions(uint256)": FunctionFragment;
    "canFinishAt(uint256)": FunctionFragment;
    "expMultiplierOf(uint256)": FunctionFragment;
    "explore(uint256,uint256,uint256,(uint8,uint256,uint256)[],(string,bytes32,bytes))": FunctionFragment;
    "finish(uint256,uint256,uint256,(uint32,uint32,uint32,uint256[],uint256[]),bool,uint256[],(string,bytes32,bytes))": FunctionFragment;
    "finishFee(uint256)": FunctionFragment;
    "finishImmediatelyProduct()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256[])": FunctionFragment;
    "itemAmountMultiplierOf(uint256)": FunctionFragment;
    "latestPassIdOf(uint256)": FunctionFragment;
    "latestPassOf(uint256)": FunctionFragment;
    "levelUpChests(uint32,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ottoCount(address,uint256)": FunctionFragment;
    "ottoOwnerOf(uint256)": FunctionFragment;
    "pass(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "restingUntil(uint256)": FunctionFragment;
    "resume()": FunctionFragment;
    "revive(uint256)": FunctionFragment;
    "reviveFee()": FunctionFragment;
    "reviveProduct()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setExpMultiplier(uint256,uint32)": FunctionFragment;
    "setItemAmountMultiplier(uint256,uint32)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "shortenCooldown(uint256,uint256)": FunctionFragment;
    "shortenDuration(uint256,uint256)": FunctionFragment;
    "signer()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeForLevelUpChests()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usePotions(uint256,uint256[])": FunctionFragment;
    "usedSignatures(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAM"
      | "DEFAULT_ADMIN_ROLE"
      | "FINISH_IMMEDIATELY_PAYMENT_KEY"
      | "ITEM"
      | "MANAGER_ROLE"
      | "MAX_OTTOS_PER_WALLET"
      | "ONE_HUNDRED_PERCENT"
      | "OTTO"
      | "PASS"
      | "POTION_EFFECT_MANAGER_ROLE"
      | "RAND"
      | "REVIVE_PAYMENT_KEY"
      | "STORE"
      | "TREASURE_CHEST_ITEM_ID"
      | "accumulativeTcp"
      | "allowPotions"
      | "allowedPotions"
      | "canFinishAt"
      | "expMultiplierOf"
      | "explore"
      | "finish"
      | "finishFee"
      | "finishImmediatelyProduct"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "itemAmountMultiplierOf"
      | "latestPassIdOf"
      | "latestPassOf"
      | "levelUpChests"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "ottoCount"
      | "ottoOwnerOf"
      | "pass"
      | "pause"
      | "proxiableUUID"
      | "renounceRole"
      | "restingUntil"
      | "resume"
      | "revive"
      | "reviveFee"
      | "reviveProduct"
      | "revokeRole"
      | "setExpMultiplier"
      | "setItemAmountMultiplier"
      | "setSigner"
      | "shortenCooldown"
      | "shortenDuration"
      | "signer"
      | "supportsInterface"
      | "upgradeForLevelUpChests"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usePotions"
      | "usedSignatures"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CLAM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINISH_IMMEDIATELY_PAYMENT_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ITEM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OTTOS_PER_WALLET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OTTO", values?: undefined): string;
  encodeFunctionData(functionFragment: "PASS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POTION_EFFECT_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RAND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVIVE_PAYMENT_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TREASURE_CHEST_ITEM_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulativeTcp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowPotions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPotions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canFinishAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expMultiplierOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "explore",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      IOttoWearingFacet.ItemActionInputStruct[],
      Adventure.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Adventure.RewardsStruct,
      boolean,
      BigNumberish[],
      Adventure.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishImmediatelyProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "itemAmountMultiplierOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPassIdOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPassOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUpChests",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ottoCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ottoOwnerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pass", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "restingUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reviveFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reviveProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemAmountMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shortenCooldown",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortenDuration",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeForLevelUpChests",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usePotions",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSignatures",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "CLAM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINISH_IMMEDIATELY_PAYMENT_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ITEM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OTTOS_PER_WALLET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OTTO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PASS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POTION_EFFECT_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RAND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVIVE_PAYMENT_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TREASURE_CHEST_ITEM_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulativeTcp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowPotions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedPotions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFinishAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expMultiplierOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "explore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finishFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishImmediatelyProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemAmountMultiplierOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPassIdOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPassOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelUpChests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ottoCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ottoOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restingUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reviveFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviveProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExpMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemAmountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shortenCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortenDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeForLevelUpChests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usePotions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedSignatures",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Departure(uint256,uint256)": EventFragment;
    "Finish(uint256,uint256,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LevelUpChestsGot(address,uint256,uint256,uint32,uint256[])": EventFragment;
    "PassUpdated(uint256,uint256)": EventFragment;
    "PotionsUsed(uint256,uint256,uint256[])": EventFragment;
    "RestingUntilUpdated(uint256,uint256,uint256)": EventFragment;
    "Revive(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TcpChanged(address,uint256,uint256)": EventFragment;
    "TreasureChestsGot(address,uint256[])": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Departure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUpChestsGot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PassUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotionsUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestingUntilUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TcpChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasureChestsGot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepartureEventObject {
  passId: BigNumber;
  ottoId: BigNumber;
}
export type DepartureEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepartureEventObject
>;

export type DepartureEventFilter = TypedEventFilter<DepartureEvent>;

export interface FinishEventObject {
  passId: BigNumber;
  ottoId: BigNumber;
  success: boolean;
}
export type FinishEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  FinishEventObject
>;

export type FinishEventFilter = TypedEventFilter<FinishEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LevelUpChestsGotEventObject {
  wallet: string;
  passId: BigNumber;
  ottoId: BigNumber;
  lv: number;
  chests: BigNumber[];
}
export type LevelUpChestsGotEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber[]],
  LevelUpChestsGotEventObject
>;

export type LevelUpChestsGotEventFilter =
  TypedEventFilter<LevelUpChestsGotEvent>;

export interface PassUpdatedEventObject {
  passId: BigNumber;
  ottoId: BigNumber;
}
export type PassUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PassUpdatedEventObject
>;

export type PassUpdatedEventFilter = TypedEventFilter<PassUpdatedEvent>;

export interface PotionsUsedEventObject {
  passId: BigNumber;
  ottoId: BigNumber;
  potions: BigNumber[];
}
export type PotionsUsedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  PotionsUsedEventObject
>;

export type PotionsUsedEventFilter = TypedEventFilter<PotionsUsedEvent>;

export interface RestingUntilUpdatedEventObject {
  ottoId: BigNumber;
  restingUntil: BigNumber;
  delta: BigNumber;
}
export type RestingUntilUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RestingUntilUpdatedEventObject
>;

export type RestingUntilUpdatedEventFilter =
  TypedEventFilter<RestingUntilUpdatedEvent>;

export interface ReviveEventObject {
  passId: BigNumber;
  ottoId: BigNumber;
}
export type ReviveEvent = TypedEvent<[BigNumber, BigNumber], ReviveEventObject>;

export type ReviveEventFilter = TypedEventFilter<ReviveEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TcpChangedEventObject {
  wallet: string;
  from: BigNumber;
  to: BigNumber;
}
export type TcpChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TcpChangedEventObject
>;

export type TcpChangedEventFilter = TypedEventFilter<TcpChangedEvent>;

export interface TreasureChestsGotEventObject {
  wallet: string;
  chests: BigNumber[];
}
export type TreasureChestsGotEvent = TypedEvent<
  [string, BigNumber[]],
  TreasureChestsGotEventObject
>;

export type TreasureChestsGotEventFilter =
  TypedEventFilter<TreasureChestsGotEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Adventure extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdventureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAM(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FINISH_IMMEDIATELY_PAYMENT_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ITEM(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_OTTOS_PER_WALLET(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    OTTO(overrides?: CallOverrides): Promise<[string]>;

    PASS(overrides?: CallOverrides): Promise<[string]>;

    POTION_EFFECT_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RAND(overrides?: CallOverrides): Promise<[string]>;

    REVIVE_PAYMENT_KEY(overrides?: CallOverrides): Promise<[string]>;

    STORE(overrides?: CallOverrides): Promise<[string]>;

    TREASURE_CHEST_ITEM_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    accumulativeTcp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowPotions(
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedPotions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canFinishAt(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    explore(
      ottoId_: BigNumberish,
      locId_: BigNumberish,
      duration_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      sig_: Adventure.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finish(
      ottoId_: BigNumberish,
      cooldown_: BigNumberish,
      sr_: BigNumberish,
      rewards_: Adventure.RewardsStruct,
      immediately_: boolean,
      potions_: BigNumberish[],
      sig_: Adventure.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishFee(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finishImmediatelyProduct(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      rand_: string,
      pass_: string,
      otto_: string,
      item_: string,
      clam_: string,
      store_: string,
      signer_: string,
      reviveProduct_: BigNumberish,
      finishImmediatelyProduct_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    itemAmountMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    latestPassIdOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestPassOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Adventure.PassStructOutput]>;

    levelUpChests(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ottoCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ottoOwnerOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pass(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Adventure.PassStructOutput]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restingUntil(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revive(
      ottoId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reviveFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    reviveProduct(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItemAmountMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortenCooldown(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortenDuration(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeForLevelUpChests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usePotions(
      ottoId_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  CLAM(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FINISH_IMMEDIATELY_PAYMENT_KEY(overrides?: CallOverrides): Promise<string>;

  ITEM(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_OTTOS_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  OTTO(overrides?: CallOverrides): Promise<string>;

  PASS(overrides?: CallOverrides): Promise<string>;

  POTION_EFFECT_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  RAND(overrides?: CallOverrides): Promise<string>;

  REVIVE_PAYMENT_KEY(overrides?: CallOverrides): Promise<string>;

  STORE(overrides?: CallOverrides): Promise<string>;

  TREASURE_CHEST_ITEM_ID(overrides?: CallOverrides): Promise<BigNumber>;

  accumulativeTcp(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowPotions(
    potions_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedPotions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canFinishAt(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expMultiplierOf(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  explore(
    ottoId_: BigNumberish,
    locId_: BigNumberish,
    duration_: BigNumberish,
    inputs_: IOttoWearingFacet.ItemActionInputStruct[],
    sig_: Adventure.SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finish(
    ottoId_: BigNumberish,
    cooldown_: BigNumberish,
    sr_: BigNumberish,
    rewards_: Adventure.RewardsStruct,
    immediately_: boolean,
    potions_: BigNumberish[],
    sig_: Adventure.SignatureStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishFee(
    passId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finishImmediatelyProduct(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    rand_: string,
    pass_: string,
    otto_: string,
    item_: string,
    clam_: string,
    store_: string,
    signer_: string,
    reviveProduct_: BigNumberish,
    finishImmediatelyProduct_: BigNumberish,
    potions_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  itemAmountMultiplierOf(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  latestPassIdOf(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  latestPassOf(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Adventure.PassStructOutput>;

  levelUpChests(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ottoCount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ottoOwnerOf(
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pass(
    passId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Adventure.PassStructOutput>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restingUntil(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revive(
    ottoId_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reviveFee(overrides?: CallOverrides): Promise<BigNumber>;

  reviveProduct(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpMultiplier(
    ottoId: BigNumberish,
    multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItemAmountMultiplier(
    ottoId: BigNumberish,
    multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    signer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortenCooldown(
    ottoId: BigNumberish,
    sec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortenDuration(
    ottoId: BigNumberish,
    sec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeForLevelUpChests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usePotions(
    ottoId_: BigNumberish,
    potions_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedSignatures(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CLAM(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FINISH_IMMEDIATELY_PAYMENT_KEY(overrides?: CallOverrides): Promise<string>;

    ITEM(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_OTTOS_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    OTTO(overrides?: CallOverrides): Promise<string>;

    PASS(overrides?: CallOverrides): Promise<string>;

    POTION_EFFECT_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    RAND(overrides?: CallOverrides): Promise<string>;

    REVIVE_PAYMENT_KEY(overrides?: CallOverrides): Promise<string>;

    STORE(overrides?: CallOverrides): Promise<string>;

    TREASURE_CHEST_ITEM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeTcp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowPotions(
      potions_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowedPotions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canFinishAt(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    explore(
      ottoId_: BigNumberish,
      locId_: BigNumberish,
      duration_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      sig_: Adventure.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finish(
      ottoId_: BigNumberish,
      cooldown_: BigNumberish,
      sr_: BigNumberish,
      rewards_: Adventure.RewardsStruct,
      immediately_: boolean,
      potions_: BigNumberish[],
      sig_: Adventure.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finishFee(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishImmediatelyProduct(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      rand_: string,
      pass_: string,
      otto_: string,
      item_: string,
      clam_: string,
      store_: string,
      signer_: string,
      reviveProduct_: BigNumberish,
      finishImmediatelyProduct_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    itemAmountMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    latestPassIdOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPassOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Adventure.PassStructOutput>;

    levelUpChests(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ottoCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ottoOwnerOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pass(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Adventure.PassStructOutput>;

    pause(overrides?: CallOverrides): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    restingUntil(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resume(overrides?: CallOverrides): Promise<void>;

    revive(ottoId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reviveFee(overrides?: CallOverrides): Promise<BigNumber>;

    reviveProduct(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemAmountMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(signer_: string, overrides?: CallOverrides): Promise<void>;

    shortenCooldown(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shortenDuration(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeForLevelUpChests(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usePotions(
      ottoId_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Departure(uint256,uint256)"(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): DepartureEventFilter;
    Departure(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): DepartureEventFilter;

    "Finish(uint256,uint256,bool)"(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      success?: null
    ): FinishEventFilter;
    Finish(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      success?: null
    ): FinishEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LevelUpChestsGot(address,uint256,uint256,uint32,uint256[])"(
      wallet?: string | null,
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      lv?: null,
      chests?: null
    ): LevelUpChestsGotEventFilter;
    LevelUpChestsGot(
      wallet?: string | null,
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      lv?: null,
      chests?: null
    ): LevelUpChestsGotEventFilter;

    "PassUpdated(uint256,uint256)"(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): PassUpdatedEventFilter;
    PassUpdated(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): PassUpdatedEventFilter;

    "PotionsUsed(uint256,uint256,uint256[])"(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      potions?: null
    ): PotionsUsedEventFilter;
    PotionsUsed(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null,
      potions?: null
    ): PotionsUsedEventFilter;

    "RestingUntilUpdated(uint256,uint256,uint256)"(
      ottoId?: BigNumberish | null,
      restingUntil?: null,
      delta?: null
    ): RestingUntilUpdatedEventFilter;
    RestingUntilUpdated(
      ottoId?: BigNumberish | null,
      restingUntil?: null,
      delta?: null
    ): RestingUntilUpdatedEventFilter;

    "Revive(uint256,uint256)"(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): ReviveEventFilter;
    Revive(
      passId?: BigNumberish | null,
      ottoId?: BigNumberish | null
    ): ReviveEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TcpChanged(address,uint256,uint256)"(
      wallet?: string | null,
      from?: null,
      to?: null
    ): TcpChangedEventFilter;
    TcpChanged(
      wallet?: string | null,
      from?: null,
      to?: null
    ): TcpChangedEventFilter;

    "TreasureChestsGot(address,uint256[])"(
      wallet?: string | null,
      chests?: null
    ): TreasureChestsGotEventFilter;
    TreasureChestsGot(
      wallet?: string | null,
      chests?: null
    ): TreasureChestsGotEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    CLAM(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FINISH_IMMEDIATELY_PAYMENT_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ITEM(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OTTOS_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    OTTO(overrides?: CallOverrides): Promise<BigNumber>;

    PASS(overrides?: CallOverrides): Promise<BigNumber>;

    POTION_EFFECT_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RAND(overrides?: CallOverrides): Promise<BigNumber>;

    REVIVE_PAYMENT_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    STORE(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURE_CHEST_ITEM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeTcp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowPotions(
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedPotions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canFinishAt(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    explore(
      ottoId_: BigNumberish,
      locId_: BigNumberish,
      duration_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      sig_: Adventure.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finish(
      ottoId_: BigNumberish,
      cooldown_: BigNumberish,
      sr_: BigNumberish,
      rewards_: Adventure.RewardsStruct,
      immediately_: boolean,
      potions_: BigNumberish[],
      sig_: Adventure.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishFee(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishImmediatelyProduct(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      rand_: string,
      pass_: string,
      otto_: string,
      item_: string,
      clam_: string,
      store_: string,
      signer_: string,
      reviveProduct_: BigNumberish,
      finishImmediatelyProduct_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    itemAmountMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPassIdOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPassOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelUpChests(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ottoCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ottoOwnerOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pass(passId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restingUntil(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revive(
      ottoId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reviveFee(overrides?: CallOverrides): Promise<BigNumber>;

    reviveProduct(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItemAmountMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortenCooldown(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortenDuration(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeForLevelUpChests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usePotions(
      ottoId_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FINISH_IMMEDIATELY_PAYMENT_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ITEM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OTTOS_PER_WALLET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OTTO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PASS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POTION_EFFECT_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RAND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVIVE_PAYMENT_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TREASURE_CHEST_ITEM_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accumulativeTcp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowPotions(
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedPotions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canFinishAt(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    explore(
      ottoId_: BigNumberish,
      locId_: BigNumberish,
      duration_: BigNumberish,
      inputs_: IOttoWearingFacet.ItemActionInputStruct[],
      sig_: Adventure.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finish(
      ottoId_: BigNumberish,
      cooldown_: BigNumberish,
      sr_: BigNumberish,
      rewards_: Adventure.RewardsStruct,
      immediately_: boolean,
      potions_: BigNumberish[],
      sig_: Adventure.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishFee(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishImmediatelyProduct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      rand_: string,
      pass_: string,
      otto_: string,
      item_: string,
      clam_: string,
      store_: string,
      signer_: string,
      reviveProduct_: BigNumberish,
      finishImmediatelyProduct_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    itemAmountMultiplierOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPassIdOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPassOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelUpChests(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ottoCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ottoOwnerOf(
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pass(
      passId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restingUntil(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revive(
      ottoId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reviveFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reviveProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItemAmountMultiplier(
      ottoId: BigNumberish,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortenCooldown(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortenDuration(
      ottoId: BigNumberish,
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeForLevelUpChests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usePotions(
      ottoId_: BigNumberish,
      potions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
